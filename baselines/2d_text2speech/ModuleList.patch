--- /opt/conda/lib/python3.6/site-packages/torch/nn/modules/container.py
+++ /opt/conda/lib/python3.6/site-packages/torch/nn/modules/container.py
@@ -5,14 +5,14 @@
     modules it contains are properly registered, and will be visible by all
     :class:`~torch.nn.Module` methods.
 
-    Args:
+    Arguments:
         modules (iterable, optional): an iterable of modules to add
 
     Example::
 
         class MyModule(nn.Module):
             def __init__(self):
-                super().__init__()
+                super(MyModule, self).__init__()
                 self.linears = nn.ModuleList([nn.Linear(10, 10) for i in range(10)])
 
             def forward(self, x):
@@ -22,10 +22,8 @@
                 return x
     """
 
-    _modules: Dict[str, Module]  # type: ignore[assignment]
-
-    def __init__(self, modules: Optional[Iterable[Module]] = None) -> None:
-        super().__init__()
+    def __init__(self, modules=None):
+        super(ModuleList, self).__init__()
         if modules is not None:
             self += modules
 
@@ -38,18 +36,17 @@
             idx += len(self)
         return str(idx)
 
-    @_copy_to_script_wrapper
-    def __getitem__(self, idx: Union[int, slice]) -> Union[Module, 'ModuleList']:
+    def __getitem__(self, idx):
         if isinstance(idx, slice):
             return self.__class__(list(self._modules.values())[idx])
         else:
             return self._modules[self._get_abs_string_index(idx)]
 
-    def __setitem__(self, idx: int, module: Module) -> None:
+    def __setitem__(self, idx, module):
         idx = self._get_abs_string_index(idx)
         return setattr(self, str(idx), module)
 
-    def __delitem__(self, idx: Union[int, slice]) -> None:
+    def __delitem__(self, idx):
         if isinstance(idx, slice):
             for k in range(len(self._modules))[idx]:
                 delattr(self, str(k))
@@ -59,65 +56,24 @@
         str_indices = [str(i) for i in range(len(self._modules))]
         self._modules = OrderedDict(list(zip(str_indices, self._modules.values())))
 
-    @_copy_to_script_wrapper
-    def __len__(self) -> int:
+    def __len__(self):
         return len(self._modules)
 
-    @_copy_to_script_wrapper
-    def __iter__(self) -> Iterator[Module]:
+    def __iter__(self):
         return iter(self._modules.values())
 
-    def __iadd__(self, modules: Iterable[Module]) -> 'ModuleList':
+    def __iadd__(self, modules):
         return self.extend(modules)
 
-    def __add__(self, other: Iterable[Module]) -> 'ModuleList':
-        combined = ModuleList()
-        for i, module in enumerate(chain(self, other)):
-            combined.add_module(str(i), module)
-        return combined
-
-    def __repr__(self):
-        """A custom repr for ModuleList that compresses repeated module representations"""
-        list_of_reprs = [repr(item) for item in self]
-        if len(list_of_reprs) == 0:
-            return self._get_name() + '()'
-
-        start_end_indices = [[0, 0]]
-        repeated_blocks = [list_of_reprs[0]]
-        for i, r in enumerate(list_of_reprs[1:], 1):
-            if r == repeated_blocks[-1]:
-                start_end_indices[-1][1] += 1
-                continue
-
-            start_end_indices.append([i, i])
-            repeated_blocks.append(r)
-
-        lines = []
-        main_str = self._get_name() + '('
-        for (start_id, end_id), b in zip(start_end_indices, repeated_blocks):
-            local_repr = f"({start_id}): {b}"  # default repr
-
-            if start_id != end_id:
-                n = end_id - start_id + 1
-                local_repr = f"({start_id}-{end_id}): {n} x {b}"
-
-            local_repr = _addindent(local_repr, 2)
-            lines.append(local_repr)
-
-        main_str += '\n  ' + '\n  '.join(lines) + '\n'
-        main_str += ')'
-        return main_str
-
-    @_copy_to_script_wrapper
     def __dir__(self):
-        keys = super().__dir__()
+        keys = super(ModuleList, self).__dir__()
         keys = [key for key in keys if not key.isdigit()]
         return keys
 
-    def insert(self, index: int, module: Module) -> None:
+    def insert(self, index, module):
         r"""Insert a given module before a given index in the list.
 
-        Args:
+        Arguments:
             index (int): index to insert.
             module (nn.Module): module to insert
         """
@@ -125,24 +81,19 @@
             self._modules[str(i)] = self._modules[str(i - 1)]
         self._modules[str(index)] = module
 
-    def append(self, module: Module) -> 'ModuleList':
+    def append(self, module):
         r"""Appends a given module to the end of the list.
 
-        Args:
+        Arguments:
             module (nn.Module): module to append
         """
         self.add_module(str(len(self)), module)
         return self
 
-    def pop(self, key: Union[int, slice]) -> Module:
-        v = self[key]
-        del self[key]
-        return v
-
-    def extend(self, modules: Iterable[Module]) -> 'ModuleList':
+    def extend(self, modules):
         r"""Appends modules from a Python iterable to the end of the list.
 
-        Args:
+        Arguments:
             modules (iterable): iterable of modules to append
         """
         if not isinstance(modules, container_abcs.Iterable):
@@ -153,5 +104,3 @@
             self.add_module(str(offset + i), module)
         return self
 
-    # remove forward alltogether to fallback on Module's _forward_unimplemented
-